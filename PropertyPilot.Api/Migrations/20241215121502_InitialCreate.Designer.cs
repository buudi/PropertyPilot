// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PropertyPilot.Dal.Contexts;

#nullable disable

namespace PropertyPilot.Api.Migrations
{
    [DbContext(typeof(PpDbContext))]
    [Migration("20241215121502_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("PropertyPilot.Dal.Models.Contract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_date");

                    b.Property<bool>("MoveOut")
                        .HasColumnType("boolean")
                        .HasColumnName("move_out");

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<Guid>("PropertyId")
                        .HasColumnType("uuid")
                        .HasColumnName("property_id");

                    b.Property<bool>("Renewable")
                        .HasColumnType("boolean")
                        .HasColumnName("renewable");

                    b.Property<double>("Rent")
                        .HasColumnType("double precision")
                        .HasColumnName("rent");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_date");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("tenant_id");

                    b.HasKey("Id")
                        .HasName("pk_contracts");

                    b.HasIndex("PropertyId")
                        .HasDatabaseName("ix_contracts_property_id");

                    b.HasIndex("TenantId")
                        .HasDatabaseName("ix_contracts_tenant_id");

                    b.ToTable("contracts", (string)null);
                });

            modelBuilder.Entity("PropertyPilot.Dal.Models.Property", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("DateArchived")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_archived");

                    b.Property<string>("Emirate")
                        .HasColumnType("text")
                        .HasColumnName("emirate");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("boolean")
                        .HasColumnName("is_archived");

                    b.Property<string>("PropertyName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("property_name");

                    b.Property<string>("PropertyType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("property_type");

                    b.Property<int?>("UnitsCount")
                        .HasColumnType("integer")
                        .HasColumnName("units_count");

                    b.HasKey("Id")
                        .HasName("pk_properties");

                    b.ToTable("properties", (string)null);
                });

            modelBuilder.Entity("PropertyPilot.Dal.Models.Tenant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("DateArchived")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_archived");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("EmiratesId")
                        .HasColumnType("text")
                        .HasColumnName("emirates_id");

                    b.Property<string>("LifecycleStatus")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("lifecycle_status");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.HasKey("Id")
                        .HasName("pk_tenants");

                    b.ToTable("tenants", (string)null);
                });

            modelBuilder.Entity("PropertyPilot.Dal.Models.Contract", b =>
                {
                    b.HasOne("PropertyPilot.Dal.Models.Property", "Property")
                        .WithMany("Contracts")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_contracts_properties_property_id");

                    b.HasOne("PropertyPilot.Dal.Models.Tenant", "Tenant")
                        .WithMany("Contracts")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_contracts_tenants_tenant_id");

                    b.Navigation("Property");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("PropertyPilot.Dal.Models.Property", b =>
                {
                    b.Navigation("Contracts");
                });

            modelBuilder.Entity("PropertyPilot.Dal.Models.Tenant", b =>
                {
                    b.Navigation("Contracts");
                });
#pragma warning restore 612, 618
        }
    }
}
